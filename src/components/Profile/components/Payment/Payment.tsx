import React, { useState, useEffect, useRef } from 'react';

interface PaymentData {
  success:          boolean;
  payment_id:       string;
  payment_url:      string;
  sbp_deep_link?:   string;
  sbp_payload?:     string;
  order_id:         string;
  status:           string;
  type?:            string; // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è SBP
}

interface TBankPaymentProps {
  paymentData: PaymentData;
  onClose:            ( ) => void;
  onPaymentSuccess?:  ( data: any) => void;
  onPaymentFail?:     ( data: any) => void;
}

const TBankPayment: React.FC<TBankPaymentProps> = ({ 
  paymentData, 
  onClose,
  onPaymentSuccess,
  onPaymentFail 
}) => {
  const [ isLoading, setIsLoading ] = useState(true);
  const [ iframeKey, setIframeKey ] = useState(0);
  const iframeRef = useRef<HTMLIFrameElement>(null);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –¥–ª—è iframe –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
  const getPaymentUrl = (): string => {
    if (paymentData.type === 'sbp' && paymentData.sbp_payload ) {
      
      console.log('üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º SBP deep link:', paymentData.sbp_payload);
      
      return paymentData.sbp_payload;
      
    }
    console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π payment_url:', paymentData.payment_url);
    return paymentData.payment_url;
  };

  const paymentUrl = getPaymentUrl();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç iframe
  useEffect(() => {
    const handleMessage = (event: MessageEvent) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      try {
        if (event.origin !== new URL(paymentUrl).origin) {
          return;
        }
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å origin —Å–æ–æ–±—â–µ–Ω–∏—è');
      }

      console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç iframe:', event.data);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      if (event.data.type === 'payment_close') {
        console.log('üîµ –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å" –Ω–∞–∂–∞—Ç–∞ –≤ iframe');
        handleClose();
      } else if (event.data.type === 'payment_success') {
        console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
        onPaymentSuccess?.(event.data);
        handleClose();
      } else if (event.data.type === 'payment_failed') {
        console.log('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è');
        onPaymentFail?.(event.data);
      } else if (event.data === 'close' || event.data === 'payment_close') {
        // –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        console.log('üîµ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏');
        handleClose();
      }
    };

    window.addEventListener('message', handleMessage);
    return () => window.removeEventListener('message', handleMessage);
  }, [paymentUrl, onClose, onPaymentSuccess, onPaymentFail]);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è iframe
  useEffect(() => {
    const checkIframeContent = () => {
      if (!iframeRef.current) return;

      try {
        const iframe = iframeRef.current;
        const iframeDoc = iframe.contentDocument || iframe.contentWindow?.document;
        
        if (iframeDoc) {
          // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ —Ä–∞–∑–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
          const closeButtons = iframeDoc.querySelectorAll([
            'button[class*="close"]',
            'button[class*="cancel"]',
            'button[class*="exit"]',
            '.close-btn',
            '.cancel-btn',
            '.exit-btn',
            '[aria-label*="close"]',
            '[aria-label*="cancel"]'
          ].join(','));

          closeButtons.forEach(button => {
            if (!button.hasAttribute('data-tbank-listener')) {
              button.setAttribute('data-tbank-listener', 'true');
              button.addEventListener('click', () => {
                console.log('üîÑ –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞');
                handleClose();
              });
            }
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL iframe –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É—Å–ø–µ—Ö–∞/–æ—à–∏–±–∫–∏
          const iframeUrl = iframe.contentWindow?.location.href;
          if (iframeUrl) {
            if (iframeUrl.includes('success=true') || iframeUrl.includes('status=success')) {
              console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ URL');
              onPaymentSuccess?.({ url: iframeUrl });
              handleClose();
            } else if (iframeUrl.includes('success=false') || iframeUrl.includes('status=failed')) {
              console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –ø–æ URL');
              onPaymentFail?.({ url: iframeUrl });
            }
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ CORS
      }
    };

    const interval = setInterval(checkIframeContent, 1000);
    return () => clearInterval(interval);
  }, [onPaymentSuccess, onPaymentFail]);

  const handleClose = () => {
    console.log('üî¥ –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –æ–∫–Ω–∞');
    onClose();
  };

  const handleRetry = () => {
    console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ iframe');
    setIsLoading(true);
    setIframeKey(prev => prev + 1);
  };

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
  const getPaymentTitle = (): string => {
    if (paymentData.type === 'sbp') {
      return '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü';
    }
    return '–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫';
  };

  if (!paymentUrl) {
    return (
      <div style={{ padding: '50px', textAlign: 'center' }}>
        <h3>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</h3>
        <button onClick={handleClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    );
  }

  return (
    <div style={{
      position: 'fixed',
      top: '0',
      left: '0',
      width: '100%',
      height: '100%',
      backgroundColor: 'white',
      zIndex: 1000,
      display: 'flex',
      flexDirection: 'column'
    }}>
      {/* –®–∞–ø–∫–∞ */}
      <div style={{
        padding: '15px',
        borderBottom: '1px solid #ddd',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: '#f5f5f5'
      }}>
        <div>
          <h3 style={{ margin: 0, color: '#333' }}>{getPaymentTitle()}</h3>
          <small style={{ color: '#666' }}>ID: {paymentData.payment_id}</small>
          {paymentData.type === 'sbp' && (
            <div style={{ color: '#2196F3', fontSize: '12px', marginTop: '2px' }}>
              üí∞ –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
            </div>
          )}
        </div>
        
        <div style={{ display: 'flex', gap: '10px' }}>
          <button 
            onClick={handleRetry}
            style={{
              background: '#2196F3',
              color: 'white',
              border: 'none',
              padding: '8px 16px',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            –û–±–Ω–æ–≤–∏—Ç—å
          </button>
          <button 
            onClick={handleClose}
            style={{
              background: '#ff4444',
              color: 'white',
              border: 'none',
              padding: '8px 16px',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
      </div>

      {/* Iframe */}
      <div style={{ flex: 1, position: 'relative' }}>
        {isLoading && (
          <div style={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            textAlign: 'center',
            zIndex: 10
          }}>
            <div style={{ fontSize: '18px', marginBottom: '10px' }}>
              {paymentData.type === 'sbp' ? '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –°–ë–ü...' : '–ó–∞–≥—Ä—É–∑–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...'}
            </div>
            <div style={{ fontSize: '14px', color: '#666' }}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</div>
          </div>
        )}
        
        <iframe
          key={iframeKey}
          ref={iframeRef}
          src={paymentUrl}
          style={{
            width: '100%',
            height: '100%',
            border: 'none',
            opacity: isLoading ? 0 : 1,
            transition: 'opacity 0.3s ease'
          }}
          onLoad={() => {
            console.log('‚úÖ Iframe –∑–∞–≥—Ä—É–∂–µ–Ω');
            setIsLoading(false);
            
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≤—è–∑–∏
            setTimeout(() => {
              if (iframeRef.current) {
                try {
                  iframeRef.current.contentWindow?.postMessage({
                    type: 'parent_ready',
                    message: '–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞'
                  }, '*');
                } catch (error) {
                  console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ iframe');
                }
              }
            }, 1000);
          }}
          onError={() => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ iframe');
            setIsLoading(false);
          }}
          title={getPaymentTitle()}
          allow="payment *"
          sandbox="allow-forms allow-scripts allow-same-origin allow-popups allow-modals"
        />
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
      <div style={{
        padding: '10px 15px',
        borderTop: '1px solid #ddd',
        backgroundColor: '#f9f9f9',
        fontSize: '12px',
        color: '#666'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
          <span>–°—Ç–∞—Ç—É—Å: {isLoading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ì–æ—Ç–æ–≤'}</span>
          <span>–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã</span>
        </div>
        {paymentData.type === 'sbp' && (
          <div style={{ marginTop: '5px', color: '#2196F3' }}>
            üí° –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–∏—Å—Ç–µ–º—É –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
          </div>
        )}
      </div>
    </div>
  );
};

export default TBankPayment;