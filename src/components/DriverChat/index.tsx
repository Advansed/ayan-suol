import { useState, useRef, useEffect } from 'react';
import OrderCard from '../card/OrderCard';
import styles from './style.module.css';

const DriverChat = (props) => {
  const chat_ = [
    {
      guidId: 1,
      chatId: 3,
      userId: 2,
      receipentId: 3,
      userName: '–ò–ê',
      userType: 'client',
      message: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥. –û–±—â–∏–π –≤–µ—Å –æ–∫–æ–ª–æ 12 —Ç–æ–Ω–Ω. –ì–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å 120,000 ‚ÇΩ. –í–æ–∑–º–æ–∂–Ω–æ –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫—É –Ω–∞ 15 –∞–ø—Ä–µ–ª—è?',
      status: true,
      send: true,
      created_at: '09:00:00',
    },
    {
      guidId: 2,
      chatId: 3,
      userId: 3,
      userName: '–ê–ª–µ–∫—Å–µ–π',
      userType: 'employee',
      message: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–∞, —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫—É 15 –∞–ø—Ä–µ–ª—è. –£ –º–µ–Ω—è –µ—Å—Ç—å —Ç—è–≥–∞—á Volvo —Å –ø–æ–ª—É–ø—Ä–∏—Ü–µ–ø–æ–º, –æ–ø—ã—Ç –ø–µ—Ä–µ–≤–æ–∑–∫–∏ –Ω–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã—Ö –≥—Ä—É–∑–æ–≤ –±–æ–ª–µ–µ 5 –ª–µ—Ç. –ù–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç 135,000 ‚ÇΩ, —Ç–∞–∫ –∫–∞–∫ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —É –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑.',
      status: true,
      send: false,
      created_at: '09:15:00',
    },
  ];

  const [chat, setChat] = useState(chat_);
  const [messageText, setMessageText] = useState('');
  const [priceOffer, setPriceOffer] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  const messageInputRef = useRef(null);
  const messagesAreaRef = useRef(null);
  
  const userIdAccount = 3;
  const userNameAccount = '–ê–ª–µ–∫—Å–µ–π';
  
  // const order = props.order;
  
  const chatInfo = {
    customerName: '–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π',
    customerShortName: '–ò–ê',
    customerRating: 4.9,
    customerReviews: 12,
  };

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  useEffect(() => {
    scrollToBottom();
  }, [chat]);

  const scrollToBottom = () => {
    if (messagesAreaRef.current) {
      messagesAreaRef.current.scrollTop = messagesAreaRef.current.scrollHeight;
    }
  };

  const getCurrentTime = () => {
    const now = new Date();
    return now.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const generateGuidId = () => {
    return Math.max(...chat.map(msg => msg.guidId)) + 1;
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = () => {
    if (!messageText.trim()) return;

    const newMessage = {
      guidId: generateGuidId(),
      chatId: 3,
      userId: userIdAccount,
      receipentId: 2,
      userName: userNameAccount,
      userType: 'employee',
      message: messageText.trim(),
      status: true,
      send: false,
      created_at: getCurrentTime(),
    };

    setChat(prevChat => [...prevChat, newMessage]);
    setMessageText('');
    
    // –§–æ–∫—É—Å –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    if (messageInputRef.current) {
      messageInputRef.current.focus();
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
  const handleSendPriceOffer = async () => {
    const price = parseInt(priceOffer.replace(/\D/g, ''));
    
    if (!price || price <= 0) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
      return;
    }

    setIsLoading(true);

    const priceMessage = {
      guidId: generateGuidId(),
      chatId: 3,
      userId: userIdAccount,
      receipentId: 2,
      userName: userNameAccount,
      userType: 'employee',
      message: `–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ü–µ–Ω—É: ${price.toLocaleString('ru-RU')} ‚ÇΩ`,
      status: true,
      send: false,
      created_at: getCurrentTime(),
      messageType: 'price_offer',
      priceValue: price
    };

    setChat(prevChat => [...prevChat, priceMessage]);
    setPriceOffer('');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    setTimeout(() => {
      setIsLoading(false);
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ
  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ
  const handlePriceChange = (e) => {
    const value = e.target.value.replace(/\D/g, '');
    if (value) {
      setPriceOffer(parseInt(value).toLocaleString('ru-RU'));
    } else {
      setPriceOffer('');
    }
  };

  // –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
  const quickReplies = [
    '–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ —É—Å–ª–æ–≤–∏—è',
    '–ù—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
    '–ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É',
    '–†–∞—Å—Å–º–æ—Ç—Ä—é –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
  ];

  const handleQuickReply = (replyText) => {
    setMessageText(replyText);
    if (messageInputRef.current) {
      messageInputRef.current.focus();
    }
  };

  return (
    <div className={styles.container}>
      <header className={styles.header} onClick={()=>{
        // props.info.type = "open"
        props.setPage( 0 );
      }}>
        <h1 className={styles.title}>–ó–∞–∫–∞–∑ ID 12460</h1>
      </header>
      
      <OrderCard
        type="new"
        price={120000}
        id="12460"
        from="–ö–∞–∑–∞–Ω—å"
        to="–£—Ñ–∞"
        loadDate="01.04.2025"
        unloadDate="03.04.2025"
        buttonShow={false}
      />

      <section className={styles.customerInfo}>
        <div className={styles.customerCard}>
          <div>
            <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑—á–∏–∫–µ</b>
            <div>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ</div>
            <div className='flex gap-8px'>
              <p className={styles.customerName}>{chatInfo.customerName}</p>
              <p className={styles.rating}>‚≠ê {chatInfo.customerRating} ({chatInfo.customerReviews} –æ—Ç–∑—ã–≤–æ–≤)</p>
            </div>
            <button className={styles.reviewsButton}>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã</button>
          </div>
          <div className={styles.avatar}>{chatInfo.customerShortName}</div>
        </div>
      </section>

      <section 
        className={styles.messages} 
        id="messagesArea"
        ref={messagesAreaRef}
      >
        {chat.map((message, index) => (
          <div 
            key={message.guidId} 
            className={userIdAccount === message.userId ? styles.messageTo : styles.messageFrom}
          >
            <div className={styles.messageContent}>
              <div className={styles.avatarSmall}>
                {userIdAccount === message.userId 
                  ? userNameAccount.slice(0, 2) 
                  : message.userName.slice(0, 2)
                }
              </div>
              <div className={styles.messageText}>
                {message.messageType === 'price_offer' ? (
                  <div className={styles.priceOfferMessage}>
                    üí∞ {message.message}
                  </div>
                ) : (
                  message.message
                )}
                <div className={styles.messageTime}>
                  {message.created_at}
                </div>
              </div>
            </div>
          </div>
        ))}
      </section>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã */}
      <div className={styles.quickReplies}>
        {quickReplies.map((reply, index) => (
          <button
            key={index}
            className={styles.quickReplyButton}
            onClick={() => handleQuickReply(reply)}
          >
            {reply}
          </button>
        ))}
      </div>

      {/* –°–µ–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã */}
      <div className={styles.actionSection}>
        <input 
          type="text" 
          className={styles.priceInput} 
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ ‚ÇΩ"
          value={priceOffer}
          onChange={handlePriceChange}
        />
        <button 
          className={styles.submitButton}
          onClick={handleSendPriceOffer}
          disabled={!priceOffer || isLoading}
        >
          {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É'}
        </button>
      </div>

      {/* –°–µ–∫—Ü–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <div className={styles.messageInputSection}>
        <textarea 
          ref={messageInputRef}
          rows={3} 
          className={styles.messageInput} 
          placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
          value={messageText}
          onChange={(e) => setMessageText(e.target.value)}
          onKeyPress={handleKeyPress}
        />
        <button 
          className={styles.sendButton}
          onClick={handleSendMessage}
          disabled={!messageText.trim() || isLoading}
        >
          ‚û§
        </button>
      </div>
    </div>
  );
};

export default DriverChat;