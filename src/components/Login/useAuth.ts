/**
 * üî• –ì–õ–ê–í–ù–´–ô –•–£–ö useAuth - –í–°–Ø –õ–û–ì–ò–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
 */

import { useState, useEffect, useCallback, useRef } from 'react'
import { AuthState, LoginCredentials, RegistrationData, RecoveryData, PasswordData, UseAuthReturn, SocketResponse } from './types'
import { validateField, validateForm, formatPhone, Phone, secureStorage, STORAGE_KEYS } from './utils'
import socketService from '../Sockets'
import { Store } from '../Store'

const INITIAL_STATE: AuthState = {
  isAuthenticated: false,
  user: null,
  isLoading: false,
  error: '',
  currentForm: 'login',
  formData: {},
  formErrors: {},
  registrationStep: 0,
  registrationData: {
    phone: '',
    name: '',
    email: ''
  },
  recoveryStep: 0,
  recoveryData: {
    phone: ''
  },
  socketStatus: 'disconnected'
}

export const useAuth = (): UseAuthReturn => {
  const [state, setState] = useState<AuthState>(INITIAL_STATE)
  const isMountedRef = useRef(true)

  // ======================
  // –£–¢–ò–õ–ò–¢–´ –°–û–°–¢–û–Ø–ù–ò–Ø
  // ======================

  const updateState = useCallback((updates: Partial<AuthState>) => {
    if (isMountedRef.current) {
      setState(prev => ({ ...prev, ...updates }))
    }
  }, [])

  const clearErrors = useCallback(() => {
    updateState({ error: '', formErrors: {} })
  }, [updateState])

  const updateFormData = useCallback((field: string, value: any) => {
    updateState({
      formData: { ...state.formData, [field]: value }
    })
  }, [state.formData, updateState])

  const updateRegistrationData = useCallback((field: string, value: any) => {
    updateState({
      registrationData: { ...state.registrationData, [field]: value }
    })
  }, [state.registrationData, updateState])

  const updateRecoveryData = useCallback((field: string, value: any) => {
    updateState({
      recoveryData: { ...state.recoveryData, [field]: value }
    })
  }, [state.recoveryData, updateState])

  // ======================
  // –ù–ê–í–ò–ì–ê–¶–ò–Ø –§–û–†–ú
  // ======================

  const showLoginForm = useCallback(() => {
    updateState({ 
      currentForm: 'login', 
      error: '', 
      formErrors: {},
      formData: {}
    })
  }, [updateState])

  const showRegisterForm = useCallback(() => {
    updateState({ 
      currentForm: 'register', 
      error: '', 
      formErrors: {},
      formData: {},
      registrationStep: 0
    })
  }, [updateState])

  const showRecoveryForm = useCallback(() => {
    updateState({ 
      currentForm: 'recovery', 
      error: '', 
      formErrors: {},
      formData: {},
      recoveryStep: 0
    })
  }, [updateState])

  // ======================
  // –í–ê–õ–ò–î–ê–¶–ò–Ø
  // ======================

  const validateFieldCallback = useCallback((field: string, value: any): string | null => {
    const error = validateField(field, value)
    updateState({
      formErrors: { ...state.formErrors, [field]: error || '' }
    })
    return error
  }, [state.formErrors, updateState])

  // ======================
  // –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
  // ======================

  const login = useCallback(async (credentials: LoginCredentials) => {
    updateState({ isLoading: true, error: '' })

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      const errors = validateForm('login', credentials)
      if (Object.keys(errors).length > 0) {
        updateState({ formErrors: errors, isLoading: false })
        return
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      secureStorage.set(STORAGE_KEYS.PHONE, credentials.phone)

      // Socket –∑–∞–ø—Ä–æ—Å
      const success = socketService.emit('authorization', {
        login: Phone(credentials.phone),
        password: credentials.password
      })

      if (!success) {
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
      }

    } catch (error) {
      console.error('Login error:', error)
      updateState({ 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 
        isLoading: false 
      })
    }
  }, [updateState])

  const register = useCallback(async (userData: RegistrationData) => {
    updateState({ isLoading: true, error: '' })

    try {
      const phone = Phone(userData.phone)
      if (phone.length !== 12) {
        updateState({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω', isLoading: false })
        return
      }
      if (userData.name.length === 0) {
        updateState({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –§–ò–û', isLoading: false })
        return
      }

      const success = socketService.emit('check_registration', {
        code: phone,
        name: userData.name.trim(),
        email: userData.email?.trim() || ''
      })

      if (!success) {
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
      }

    } catch (error) {
      console.error('Registration error:', error)
      updateState({ 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 
        isLoading: false 
      })
    }
  }, [updateState])

  const recoverPassword = useCallback(async (data: RecoveryData) => {
    updateState({ isLoading: true, error: '' })

    try {
      const phone = Phone(data.phone)
      if (phone.length !== 12) {
        updateState({ error: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', isLoading: false })
        return
      }

      const success = socketService.emit('check_restore', {
        phone: phone
      })

      if (!success) {
        throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
      }

    } catch (error) {
      console.error('Recovery error:', error)
      updateState({ 
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', 
        isLoading: false 
      })
    }
  }, [updateState])

  // ======================
  // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –®–ê–ì–ò
  // ======================

  const nextRegistrationStep = useCallback(() => {
    updateState({ 
      registrationStep: Math.min(state.registrationStep + 1, 3) 
    })
  }, [state.registrationStep, updateState])

  const prevRegistrationStep = useCallback(() => {
    updateState({ 
      registrationStep: Math.max(state.registrationStep - 1, 0) 
    })
  }, [state.registrationStep, updateState])

  const submitRegistrationStep = useCallback(async () => {
    switch (state.registrationStep) {
      case 0:
        await register(state.registrationData as RegistrationData)
        break
      case 1:
        window.open(`tel:${state.registrationData.call_phone}`)
        updateState({ registrationStep: 2 })
        break
      case 2:
        socketService.emit('test_call', state.registrationData)
        break
      case 3:
        const passwordData: PasswordData = {
          token: state.registrationData.token || '',
          password: state.formData.password || '',
          password1: state.formData.password1 || ''
        }

        const errors = validateForm('password', passwordData)
        if (Object.keys(errors).length > 0) {
          updateState({ formErrors: errors })
          return
        }

        socketService.emit('save_password', passwordData)
        break
    }
  }, [state.registrationStep, state.registrationData, state.formData, register, updateState])

  // ======================
  // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –®–ê–ì–ò
  // ======================

  const nextRecoveryStep = useCallback(() => {
    updateState({ 
      recoveryStep: Math.min(state.recoveryStep + 1, 3) 
    })
  }, [state.recoveryStep, updateState])

  const prevRecoveryStep = useCallback(() => {
    updateState({ 
      recoveryStep: Math.max(state.recoveryStep - 1, 0) 
    })
  }, [state.recoveryStep, updateState])

  const submitRecoveryStep = useCallback(async () => {
    console.log(" submit recovery step", state.recoveryData )
    switch (state.recoveryStep) {
      case 0:
        await recoverPassword(state.recoveryData)
        break
      case 1:
        window.open(`tel:${state.recoveryData.call_phone}`)
        updateState({ recoveryStep: 2 })
        break
      case 2:
        socketService.emit('test_restore_call', state.recoveryData)
        break
      case 3:
        const passwordData: PasswordData = {
          token: state.recoveryData.token || '',
          password: state.formData.password || '',
          password1: state.formData.password1 || '',
          phone: state.recoveryData.phone
        }

        const errors = validateForm('password', passwordData)
        if (Object.keys(errors).length > 0) {
          updateState({ formErrors: errors })
          return
        }

        socketService.emit('save_password', passwordData)
        break
    }
  }, [state.recoveryStep, state.recoveryData, state.formData, recoverPassword, updateState])

  // ======================
  // SOCKET –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
  // ======================

  useEffect(() => {
    isMountedRef.current = true

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
    const savedPhone = secureStorage.get(STORAGE_KEYS.PHONE)
    if (savedPhone) {
      updateState({
        formData: { phone: savedPhone }
      })
    }

    const socket = socketService.getSocket()
    if (!socket) return

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const handleAuth = (response: SocketResponse) => {
      if (!isMountedRef.current) return

      updateState({ isLoading: false })
      
      if (response.success) {
        updateState({ 
          isAuthenticated: true, 
          user: response.data 
        })
        Store.dispatch({ type: "login", data: response.data })
        Store.dispatch({ type: "auth", data: true })
        
        if (response.data.driver) {
          Store.dispatch({ type: "swap", data: true })
        }
      } else {
        updateState({ error: response.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const handleRegistration = (response: SocketResponse) => {
      if (!isMountedRef.current) return

      updateState({ isLoading: false })
      
      if (response.success) {
        updateRegistrationData('status', response.data.status)
        updateRegistrationData('check_id', response.data.check_id)
        updateRegistrationData('call_phone', response.data.call_phone)
        updateRegistrationData('token', response.data.token)
        nextRegistrationStep()
      } else {
        updateState({ error: response.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const handleRestore = (response: SocketResponse) => {
      if (!isMountedRef.current) return

      updateState({ isLoading: false })
      
      if (response.success) {
        updateRecoveryData('status', response.data.status)
        updateRecoveryData('check_id', response.data.check_id)
        updateRecoveryData('call_phone', response.data.call_phone)
        updateRecoveryData('token', response.data.token)
        updateRecoveryData('user_data', response.data.user_data)
        nextRecoveryStep()
      } else {
        updateState({ error: response.message || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω' })
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–≤–æ–Ω–∫–∞
    const handleTestCall = (response: SocketResponse) => {
      if (!isMountedRef.current) return

      if (response.data.check_status === 400) {
        updateState({ error: response.data.check_status_text })
      }
      if (response.data.check_status === 401) {
        nextRegistrationStep()
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–≤–æ–Ω–∫–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const handleTestRestoreCall = (response: SocketResponse) => {
      if (!isMountedRef.current) return

      if (response.data.check_status === 400) {
        updateState({ error: response.data.check_status_text || '–ó–≤–æ–Ω–æ–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' })
      }
      if (response.data.check_status === 401) {
        nextRecoveryStep()
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const handleSavePassword = (response: SocketResponse) => {
      if (!isMountedRef.current) return

      if (response.success) {
        Store.dispatch({ type: "login", data: response.data })
        Store.dispatch({ type: "auth", data: true })
        
        if (response.data.driver) {
          Store.dispatch({ type: "swap", data: true })
        }
      } else {
        updateState({ error: response.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è' })
      }
    }

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    socket.on('authorization', handleAuth)
    socket.on('check_registration', handleRegistration)
    socket.on('check_restore', handleRestore)
    socket.on('test_call', handleTestCall)
    socket.on('test_restore_call', handleTestRestoreCall)
    socket.on('save_password', handleSavePassword)

    return () => {
      isMountedRef.current = false
      
      if (socket) {
        socket.off('authorization', handleAuth)
        socket.off('check_registration', handleRegistration)
        socket.off('check_restore', handleRestore)
        socket.off('test_call', handleTestCall)
        socket.off('test_restore_call', handleTestRestoreCall)
        socket.off('save_password', handleSavePassword)
      }
    }
  }, [updateState, updateRegistrationData, updateRecoveryData, nextRegistrationStep, nextRecoveryStep])

  // ======================
  // –í–û–ó–í–†–ê–¢ –ò–ù–¢–ï–†–§–ï–ô–°–ê
  // ======================

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    ...state,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    login,
    register,
    recoverPassword,
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ñ–æ—Ä–º
    showLoginForm,
    showRegisterForm,
    showRecoveryForm,
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    validateField: validateFieldCallback,
    
    // –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    nextRegistrationStep,
    prevRegistrationStep,
    submitRegistrationStep,
    
    // –®–∞–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    nextRecoveryStep,
    prevRecoveryStep,
    submitRecoveryStep,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    clearErrors,
    updateFormData,
    updateRegistrationData,
    updateRecoveryData
  }
}