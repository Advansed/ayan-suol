/**
 * –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ + –≤—Å–µ —à–∞–≥–∏ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
 */

import React, { useCallback, useState } from 'react'
import { IonCard } from '@ionic/react'
import { useReg, UseRegReturn } from './useReg'
import { 
  MaskedInput, 
  TextInput, 
  PasswordInput, 
  ProgressBar, 
  FormButtons, 
  NavigationLinks 
} from '../SharedComponents'
import styles from '../../Profile/components/Agreements/Agreements.module.css'
import EULA from './eula'

interface RegistrationFormProps {
  onLoginForm?: () => void
  onRecoveryForm?: () => void
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const formatPhoneDisplay = (phone: string): string => {
  if (!phone || phone.length < 10) return phone
  return `${phone.substring(0, 2)} (${phone.substring(2, 5)}) ${phone.substring(5, 8)}-${phone.substring(8, 10)}-${phone.substring(10)}`
}

// ======================
// –®–ê–ì 0: –í–´–ë–û–† –†–û–õ–ò
// ======================

const RoleSelector: React.FC<{ reg: UseRegReturn }> = ({ reg }) => {
  const handleNext = useCallback(() => {
    if (reg.formData.userType) {
      reg.updateRegistrationData('userType', reg.formData.userType)
      reg.nextStep()
    }
  }, [reg])
   const [showAgreement, setShowAgreement] = useState(false)

  return (
    <div className="login-container">
      <div className="a-center">
        <h2>–ö—Ç–æ –≤—ã?</h2>
      </div>

      <div className="fs-11 a-center mb-2">
        –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
      </div>

      <div className="mt-1">
        <div className="role-selection-buttons">
          <button
            type="button"
            className={`role-button ${reg.formData.userType === '1' ? 'selected' : ''}`}
            onClick={() => reg.updateFormData('userType', '1')}
          >
            <div className="role-icon">üì¶</div>
            <div>–ó–∞–∫–∞–∑—á–∏–∫</div>
          </button>
          <button
            type="button"
            className={`role-button ${reg.formData.userType === '2' ? 'selected' : ''}`}
            onClick={() => reg.updateFormData('userType', '2')}
          >
            <div className="role-icon">üöõ</div>
            <div>–í–æ–¥–∏—Ç–µ–ª—å</div>
          </button>
        </div>
      </div>

{/* –ß–µ–∫–±–æ–∫—Å —Å–æ–≥–ª–∞—Å–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º */}
      <div className="mt-3">
        <label className="flex items-start gap-2 text-sm">
          <input
            type="checkbox"
            checked={reg.formData.agreementAccepted || false}
            onChange={(e) => reg.updateFormData('agreementAccepted', e.target.checked)}
            className="mt-1 flex-shrink-0"
          />
          <span>
            –Ø –ø—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è{' '}
            <button
              type="button"
              className="text-blue-600 underline hover:text-blue-800"
              onClick={() => setShowAgreement(true)}
            >
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
            </button>
          </span>
        </label>
        {reg.formErrors.agreementAccepted && (
          <div className="text-red-500 text-xs mt-1">{reg.formErrors.agreementAccepted}</div>
        )}
      </div>

      <FormButtons
        onNext={handleNext}
        nextText="–î–∞–ª–µ–µ"
        disabled={!reg.formData.userType}
        loading={reg.isLoading}
      />


      {showAgreement && (
        <div className={styles.modalOverlay} onClick={() => setShowAgreement(false)}>
          <div className={styles.modalContent} onClick={e => e.stopPropagation()}>
            <button className={styles.closeBtn} onClick={() => setShowAgreement(false)}>
              √ó
            </button>
            <EULA />
          </div>
        </div>
      )}
    </div>
  )
}

// ======================
// –®–ê–ì 1: –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï
// ======================

const StepPersonalInfo: React.FC<{ reg: UseRegReturn }> = ({ reg }) => {
  const handleNext = useCallback(() => {
    reg.submitStep()
  }, [reg])

  const handlePhoneBlur = useCallback(() => {
    if (reg.formData.phone) {
      reg.validateField('phone', reg.formData.phone)
    }
  }, [reg])

  const handleNameBlur = useCallback(() => {
    if (reg.formData.name) {
      reg.validateField('name', reg.formData.name)
    }
  }, [reg])

  const handleEmailBlur = useCallback(() => {
    if (reg.formData.email) {
      reg.validateField('email', reg.formData.email)
    }
  }, [reg])

  const handlePartnerBlur = useCallback(() => {
    if (reg.formData.partner) {
      reg.validateField('partner', reg.formData.partner)
    }
  }, [reg])

  return (
    <div className="login-container">
      <div className="a-center">
        <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h2>
      </div>

      <div className="fs-11 a-center mb-2">
        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      </div>

      {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
      <div className="mt-1">
        <MaskedInput
          placeholder="+7 (XXX) XXX-XXXX"
          value={reg.formData.phone || ''}
          onChange={(value) => reg.updateFormData('phone', value)}
          onBlur={handlePhoneBlur}
          error={reg.formErrors.phone}
        />
      </div>

      {/* –§–ò–û */}
      <div className="mt-1">
        <TextInput
          placeholder="–§–ò–û"
          value={reg.formData.name || ''}
          onChange={(value) => reg.updateFormData('name', value)}
          onBlur={handleNameBlur}
          error={reg.formErrors.name}
        />
      </div>

      {/* Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) */}
      <div className="mt-1">
        <TextInput
          placeholder="Email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
          value={reg.formData.email || ''}
          onChange={(value) => reg.updateFormData('email', value)}
          onBlur={handleEmailBlur}
          error={reg.formErrors.email}
        />
      </div>

      <FormButtons
        onNext={handleNext}
        onBack={reg.prevStep}
        nextText="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
        disabled={!reg.formData.phone?.trim() || !reg.formData.name?.trim()}
        loading={reg.isLoading}
      />
      
    </div>
  )
}

// ======================
// –®–ê–ì 2: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï SMS
// ======================

const StepVerification: React.FC<{ reg: UseRegReturn }> = ({ reg }) => {
  const [pin, setPin] = React.useState(['', '', '', ''])

  React.useEffect(() => {
    const pinString = pin.join('')
    reg.updateFormData('pincode', pinString)
  }, [pin]) // –£–±—Ä–∞—Ç—å reg –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const handlePinChange = (value: string, index: number) => {
    const newPin = [...pin]
    newPin[index] = value.slice(-1) // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª
    setPin(newPin)
    
    // –ê–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
    if (value && index < 3) {
      const nextInput = document.querySelector(`input[data-pin-index="${index + 1}"]`) as HTMLInputElement
      if (nextInput) {
        nextInput.focus()
      }
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent, index: number) => {
    if (e.key === 'Backspace' && !pin[index] && index > 0) {
      const prevInput = document.querySelector(`input[data-pin-index="${index - 1}"]`) as HTMLInputElement
      if (prevInput) {
        prevInput.focus()
      }
    }
  }

  const handleCall = useCallback(() => {
    reg.submitStep()
  }, [reg])

  return (
    <div className="login-container">
      <div className="a-center">
        <h2>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</h2>
      </div>

      <div className="fs-11 a-center mb-2">
        –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–≤–æ–Ω–∫–∞
      </div>

      <div className="a-center fs-14 mt-2 mb-2">
        <b>{formatPhoneDisplay(reg.registrationData.call_phone || '')}</b>
      </div>

      {/* PIN –∫–æ–¥ */}
      <div className="mt-1">
        <div className="pin-input-container">
          {[0, 1, 2, 3].map((index) => (
            <input
              key={index}
              type="text"
              maxLength={1}
              value={pin[index] || ''}
              onChange={(e) => handlePinChange(e.target.value, index)}
              onKeyDown={(e) => handleKeyDown(e, index)}
              data-pin-index={index}
              className="pin-input"
            />
          ))}
        </div>
      </div>

      <FormButtons
        onNext={handleCall}
        onBack={reg.prevStep}
        nextText="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
        loading={reg.isLoading}
      />
    </div>
  )
}

// ======================
// –®–ê–ì 3: –£–°–¢–ê–ù–û–í–ö–ê –ü–ê–†–û–õ–Ø
// ======================

const StepSetPassword: React.FC<{ reg: UseRegReturn }> = ({ reg }) => {
  const handleSave = useCallback(() => {
    reg.submitStep()
  }, [reg])

  const handlePasswordBlur = useCallback(() => {
    if (reg.formData.password) {
      reg.validateField('password', reg.formData.password)
    }
  }, [reg])

  const handlePassword1Blur = useCallback(() => {
    if (reg.formData.password1) {
      reg.validateField('password1', reg.formData.password1)
      
      if (reg.formData.password && reg.formData.password1) {
        if (reg.formData.password !== reg.formData.password1) {
          reg.updateFormData('password1Error', '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
        } else {
          reg.updateFormData('password1Error', '')
        }
      }
    }
  }, [reg])

  const passwordsMatch = reg.formData.password && reg.formData.password1 && 
                        reg.formData.password === reg.formData.password1

  return (
    <div className="login-container">
      <div className="a-center">
        <h2>–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>
      </div>

      <div className="fs-11 a-center mb-2">
        –°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ
      </div>

      {/* –ü–∞—Ä–æ–ª—å */}
      <div className="mt-1">
        <PasswordInput
          placeholder="–ü–∞—Ä–æ–ª—å"
          value={reg.formData.password || ''}
          onChange={(value) => reg.updateFormData('password', value)}
          onBlur={handlePasswordBlur}
          error={reg.formErrors.password}
          autocomplete="new-password"
        />
      </div>

      {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è */}
      <div className="mt-1">
        <PasswordInput
          placeholder="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
          value={reg.formData.password1 || ''}
          onChange={(value) => reg.updateFormData('password1', value)}
          onBlur={handlePassword1Blur}
          error={reg.formErrors.password1 || reg.formData.password1Error}
          autocomplete="new-password"
        />
      </div>

      <FormButtons
        onNext={handleSave}
        onBack={reg.prevStep}
        nextText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
        disabled={!passwordsMatch}
        loading={reg.isLoading}
      />
    </div>
  )
}

// ======================
// –ì–õ–ê–í–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
// ======================

const RegistrationForm: React.FC<RegistrationFormProps> = ({ onLoginForm, onRecoveryForm }) => {
  const reg = useReg()
  
  const steps = [
    <RoleSelector reg={reg} />,        // –®–∞–≥ 0: –í—ã–±–æ—Ä —Ä–æ–ª–∏
    <StepPersonalInfo reg={reg} />,    // –®–∞–≥ 1: –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
    <StepVerification reg={reg} />,    // –®–∞–≥ 2: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    <StepSetPassword reg={reg} />      // –®–∞–≥ 3: –ü–∞—Ä–æ–ª—å
  ]

  const navigationLinks = [
    ...(onLoginForm ? [{
      text: '–ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è',
      onClick: onLoginForm
    }] : []),
    ...(onRecoveryForm ? [{
      text: '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å? –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
      onClick: onRecoveryForm
    }] : [])
  ]

  return (
    <div className="container">
      <IonCard className="login-container">
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ */}
        {reg.error && (
          <div className="error-alert">
            <div className="error-message">{reg.error}</div>
            <button onClick={reg.clearErrors}>√ó</button>
          </div>
        )}
        
        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
        <ProgressBar current={reg.registrationStep} total={4} />
        
        {/* –¢–µ–∫—É—â–∏–π —à–∞–≥ */}
        {steps[reg.registrationStep]}
        
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —à–∞–≥–µ */}
        {reg.registrationStep === 3 && navigationLinks.length > 0 && (
          <NavigationLinks links={navigationLinks} />
        )}
      </IonCard>
    </div>
  )
}

export default RegistrationForm